<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Glob模式</title>
      <link href="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/glob%E6%A8%A1%E5%BC%8F/glob%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/glob%E6%A8%A1%E5%BC%8F/glob%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> glob </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用指南（未完成）</title>
      <link href="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1>Git 的安装</h1><h2 id="在-Arch-Linux-上安装">在 Arch Linux 上安装</h2><p>直接用<code>pacman</code>安装即可<br>一般情况下 git 会作为其他包的依赖安装，所以一般不用主动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S git</span><br></pre></td></tr></table></figure><h1>Git 的配置</h1><h2 id="Git-的三个配置文件">Git 的三个配置文件</h2><blockquote><p>Git 自带一个 <code>git config</code> 工具来控制 Git 的外观和行为</p></blockquote><ul><li><code>/etc/gitconfig</code>文件：用 <code>sudo git config --system</code> 进行配置，针对整个系统</li><li><code>~/.gitconfig</code>或<code>~/.config/git/config</code>文件：用 <code>git config --global</code> 配置，针对当前用户</li><li><code>.git/config</code> 文件：用 <code>git config --local</code> 配置，针对某一工作目录</li></ul><p><strong>每一个级别会覆盖上一级别的配置</strong></p><h2 id="配置用户信息和文本编辑器">配置用户信息和文本编辑器</h2><p>用下面两条命令配置用户名和邮箱<br>用户名和邮箱会在每次提交的同时提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email 你的邮箱</span><br></pre></td></tr></table></figure><p>用下面的命令配置文本编辑器，在每次 git 需要你输入信息时，就会打开这个文本编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor vim</span><br></pre></td></tr></table></figure><p>配置完成后，可以通过以下命令查看配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>当你不记得某些变量在哪里配置的时候，可以通过下面的命令查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --show-origin 变量名</span><br></pre></td></tr></table></figure><blockquote><p>注：使用 <code>git config --local(or global/system) -e</code> 会使用默认的编辑器打开相应的配置文件</p></blockquote><h2 id="获取帮助文档">获取帮助文档</h2><p>首先要安装 <code>man</code>，这个包的名字是 manual 的简写，用于查看系统中自带的各种参考手册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S man</span><br></pre></td></tr></table></figure><p>通过 <code>git help [verb]</code> 获取详细的帮助文档，如 <code>git help config</code><br>通过 <code>git [verb] -h</code> 获得简洁的帮助文档，如 <code>git config -h</code></p><h2 id="配置远端仓库">配置远端仓库</h2><h3 id="配置-SSH-密钥">配置 SSH 密钥</h3><p>首先要生成本机 ssh 密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>这会在 <code>~/.ssh</code> 文件夹生成两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code><br>我们将 <code>id_rsa.pub</code> 中的内容复制（注意这个是公钥，另一个自己保留）<br>然后进入 github/gitee，打开 设置 -&gt; SSH and GPG keys -&gt; New SSH key<br>在该页面中，将内容粘贴到 Key 文本框中，标题在粘贴时会自动生成，一般不用更改，Key type 一般也不用更改</p><p>通过下面的命令可以验证 SSH 密钥是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><blockquote><p>注意：若 ssh 命令不存在，可以手动下载 <code>sudo pacman -S openssh</code></p></blockquote><h3 id="创建和连接远端仓库">创建和连接远端仓库</h3><p>在 Github/Gitee 创建一个仓库</p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git01.png" class="" title="创建仓库"><p>然后复制其 ssh 链接</p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git02.png" class="" title="复制SSH链接"><p>在本地创建一个文件夹，然后在这个文件夹打开终端，输入下面的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>通过下面的命令使工作区与远端仓库建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 远程仓库代号 远端仓库的ssh地址</span><br></pre></td></tr></table></figure><p>其中，远程仓库代号并不一定要与 Github 的仓库名相同，他只是作为本地连接到远端仓库的标识<br>到这里，Git 的基本配置就结束了</p><h1>Git 常用指令</h1><h2 id="仓库的简单（常用）操作">仓库的简单（常用）操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 将当前目录设置为工作区（workplace），并在当前目录创建一个 .git 文件夹</span></span><br><span class="line">git add . <span class="comment"># 将工作区（workplace）所有文件都添加到暂存区（index/stage）</span></span><br><span class="line">git commit -m <span class="string">&#x27;提交信息&#x27;</span> <span class="comment"># 将暂存区的文件提交到仓库（repository）</span></span><br><span class="line">git push 远程仓库名 本地分支名:远端分支名 <span class="comment"># 将本次仓库的文件推送到远端仓库</span></span><br></pre></td></tr></table></figure><p>工作区即本地目录，暂存区的文件都是被跟踪的文件，被跟踪的文件可以被提交到仓库，本地仓库的文件能被推送的远端仓库<br>提交信息能帮助我们快速地识别每次提交的内容，因此写提交信息需要规范<br>此外，使用下面的命令可以查看各个文件的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 还可以加一个`-s`参数，以获取简短的信息</span></span><br></pre></td></tr></table></figure><h2 id="忽略文件-gitignore">忽略文件 <code>.gitignore</code></h2><p>有时我们不希望所有的文件都被跟踪，比如日志文件，临时文件等<br>这时我们可以在工作区目录下创建一个 <code>.gitignore</code> 的文件，在里面写上要忽略的文件，这样在使用<code>git add</code>的时候就不会将该文件匹配到的文件或文件夹加入暂存区</p><blockquote><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以 # 开头的行都会被 Git 忽略。</li><li>可以使用标准的 <a href="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/glob%E6%A8%A1%E5%BC%8F/glob%E6%A8%A1%E5%BC%8F/" title="Glob模式">glob模式</a> 匹配，它会递归地应用在整个工作区中。</li><li>匹配模式可以以（/）开头防止递归。</li><li>匹配模式可以以（/）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li></ul></blockquote><p>当然，我们一般不需要自己写这个文件，在 <a href="https://github.com/github/gitignore">这里</a> 我们能找到大部分语言或项目常用的<code>.gitignore</code>文件，找到并将其复制到自己项目的<code>.gitignore</code>文件即可</p><p>当我们忘记添加<code>.gitignore</code>文件却将一些不需要提交的文件提交时，可以用下面的命令删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cache 文件名/目录名</span><br></pre></td></tr></table></figure><h2 id="分支">分支</h2><p>在使用了<code>git init</code>后，git会默认帮我们创建并转到<code>master</code>分支<br>分支允许我们在另一条“线”进行开发，而不会影响到“主线”，在分支完成开发后，还可以将分支和主线进行合并<br>例如现在有一个<code>main</code>分支，接下来在这个分支我们提交一个文件<code>a.txt</code>，然后创建并转到<code>dev</code>分支，这时该分支也会有<code>a.txt</code><br>我们在<code>dev</code>分支<strong>提交</strong>一个<code>b.txt</code>，再回到<code>main</code>分支，就会发现这时的工作目录中没有<code>b.txt</code><br>而如果我们在<code>main</code>分支中，将<code>dev</code>合并到<code>main</code>分支，就能够看到<code>b.txt</code></p><h3 id="分支的基本操作">分支的基本操作</h3><p>想要创建新的分支，可以用如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：只有在已经有文件提交的时候才能新建分支</p></blockquote><p>如果想在新的分支进行操作，可以用下面的命令转到新的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>实际上，使用下面的命令可以直接创建并转到新的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>使用下面的命令可以查看分支支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -v <span class="comment"># 显示每一个分支及其最后一次提交</span></span><br><span class="line">git branch --merged <span class="comment"># 查看与当前分支已经合并的分支</span></span><br><span class="line">git branch --no-merged <span class="comment"># 查看没有与当前分支合并的分支</span></span><br></pre></td></tr></table></figure><p>*表示的分支就是当前分支</p><p>使用下面的命令可以删除分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt; <span class="comment"># 安全删除分支（已经合并的分支可以安全删除）</span></span><br><span class="line">git branch -D &lt;分支名&gt; <span class="comment"># 强制删除分支</span></span><br></pre></td></tr></table></figure><h3 id="合并分支">合并分支</h3><p>使用下面的命令可以将目标分支合并到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;目标分支&gt;</span><br></pre></td></tr></table></figure><p>如在<code>dev</code>分支中有几个新文件，将其合并到<code>master</code>后，这几个新文件也会出现在<code>master</code>分支中<br>然而，在协作开发的过程中，常常会有<strong>合并冲突</strong>的情况<br>例如，在<code>master</code>分支中有一个文件<code>a.txt</code>，<code>dev</code>分支也有一个文件<code>a.txt</code><br>现在分别对里面的内容进行修改，然后尝试将<code>dev</code>合并到<code>master</code></p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git6.png" class="" title="图：合并冲突演示"><p>这里会发现合并失败，这是因为自动合并时<code>git</code>不知道该选择哪个分支的内容，因此需要我们手动修改<br>我们在<code>master</code>分支中打开<code>a.txt</code>，里面会变成这样</p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git4.png" class="" title="图：合并冲突演示"><p>然后对其修改，保留我们要留下的东西即可，如下</p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git5.png" class="" title="图：合并冲突演示"><p>然后进行合并即可</p><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git7.png" class="" title="图：合并冲突演示"><h2 id="远程仓库的使用">远程仓库的使用</h2><h3 id="远端仓库的增删改查">远端仓库的增删改查</h3><p>使用下面的命令连接（添加）远端仓库，详情在上文已经介绍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远程仓库代号&gt; &lt;远端仓库地址&gt;</span><br></pre></td></tr></table></figure><p>使用下面的命令删除与远端仓库的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;远程仓库代号&gt;</span><br></pre></td></tr></table></figure><p>使用下面的命令修改远程仓库代号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename &lt;原来的名称&gt; &lt;新的名称&gt;</span><br></pre></td></tr></table></figure><p>使用下面的命令列出连接的远端仓库的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="comment"># 显示所有远程仓库代号</span></span><br><span class="line">git remote -v <span class="comment"># 显示所有远程仓库代号和其地址</span></span><br><span class="line">git remote show &lt;远程仓库代号&gt; <span class="comment"># 显示远端仓库的详细信息</span></span><br></pre></td></tr></table></figure><h3 id="推送和拉取">推送和拉取</h3><p>使用下面的命令可以将本次仓库推送的远端仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程仓库代号&gt; &lt;本地分支名&gt;[:远端分支名]</span><br></pre></td></tr></table></figure><h2 id="克隆">克隆</h2><p>利用下面的指令可以从远端克隆一个仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;https或ssh地址&gt; <span class="comment"># 直接克隆</span></span><br><span class="line">git <span class="built_in">clone</span> 地址 new_name <span class="comment"># 克隆并重命名</span></span><br><span class="line">git <span class="built_in">clone</span> -o &lt;远程仓库代号&gt; &lt;地址&gt; <span class="comment"># 默认远端仓库代号是 origin，用该命令可以修改代号</span></span><br></pre></td></tr></table></figure><h2 id="输出日志">输出日志</h2><p>使用下面的命令可以输出提交日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><img src="/2025/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux/ArchLinux/git/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/git3.png" class="" title="git log"><p>以下是可选的一些参数</p><ul><li><code>--all</code> 显示所有分支</li><li><code>-n</code> 要显示日志的数量</li><li><code>--abbrev-commit</code> 使得输出的 commit id 更简短</li><li><code>--oneline</code> 将提交信息显示为一行（默认会添加 <code>--abbrev-commit</code> 参数）</li><li><code>--pretty=</code><ul><li><code>oneline</code> 将提交信息显示为一行（默认不会添加 <code>--abbrev-commit</code> 参数）</li><li><code>short</code>,<code>full</code>,<code>fuller</code> 显示信息的详尽程度</li></ul></li><li><code>--graph</code> 以图的形式显示</li><li><code>--stat</code> 输出对更改内容的统计</li><li><code>--patch</code> 输出更改的内容</li><li><code>--no-merges</code> 隐藏合并（merge）提交</li><li>日志按日期筛选<ul><li><code>--before='xxxx-xx-xx'</code> 输出某日期（包含）之前的日志</li><li><code>--after='xxxx-xx-xx'</code> 输入某日期（不包含）之后的日志</li><li>日期还可以输入 <code>today</code>，<code>yesterday</code>，<code>30 days ago</code>，<code>1 week ago</code> 等</li></ul></li><li><code>--author=用户名/邮箱</code> 通过用户筛选日志</li><li><code>--grep=提交信息</code> 按提交信息筛选日志</li></ul><blockquote><p>如果日志过长，会在在终端最下方出现 <code>:</code>，表示日志未显示完全<br>这时按下<code>回车键</code>或<code>方向下键</code>能继续显示日志，按 <code>q</code> 推出日志</p></blockquote><h2 id="撤销操作">撤销操作</h2><h3 id="“修补”提交">“修补”提交</h3><p>使用下面的命令可以将该次提交并入到上一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>改自官方文档的例子如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;第一次提交&#x27;</span></span><br><span class="line">git add 少提交的文件</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>这样<code>少提交的文件</code>和<code>第一次提交的文件</code>就会共用一次提交</p><h3 id="回滚版本">回滚版本</h3><p>当我们想回到先前的版本时，我们可以用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commitID&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>commitID</code>可以是完整的<code>hash</code>值，也可以是简写的<code>hash</code>值（用<code>git log --oneline</code>等指令可以查看）</p><blockquote><p><strong>注意：回滚版本会修改目录的文件，回滚前一定要注意别让重要的文件丢失</strong></p></blockquote><p>回滚后，最新的几次提交就无法使用<code>git log</code>查看，如果想恢复到原来的版本，可以用下面的命令查看最新几次提交的<code>commitID</code>，然后用<code>git reset</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h1>其他可能用得到的指令</h1><p><code>git diff</code> 比较文件差异，主要用于查看哪些更新没暂存，哪些已经暂存但没有提交<br><code>git commit -a</code> 把所有已经被跟踪的文件暂存并一起提交<br><code>git rm &lt;file&gt;</code> 删除文件并删除其在暂存区的信息<br><code>git mv &lt;file&gt;</code> 移动文件并修改其在暂存区的信息<br><code>git log --pretty=format:&quot;&quot;</code> 格式化 log 输出，详情看 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2#pretty_format">这里</a></p><h1>一些问题的解决方法</h1><h2 id="使用-git-branch-等指令会打开默认编辑器">使用 <code>git branch</code> 等指令会打开默认编辑器</h2><p>关闭分页器即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.pager <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1>参考链接🔗</h1><ul><li>安装 | Git官网：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">https://git-scm.com/book/zh/v2/起步-安装-Git</a></li><li>文档 | Git官网：<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Git </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
